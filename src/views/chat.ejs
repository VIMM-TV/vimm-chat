<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VIMM Chat | <%= hiveAccount %></title>
    <style>
        :root {
            --primary-color: #6441a5;
            --bg-color: #18181b;
            --text-color: #efeff1;
            --secondary-color: #1f1f23;
            --accent-color: #9147ff;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--bg-color);
            color: var(--text-color);
        }
        
        #chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 100%;
            margin: 0 auto;
            height: 100%;
        }
        
        #chat-header {
            padding: 8px 16px;
            background-color: var(--secondary-color);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        #chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            display: flex;
            flex-direction: column;
        }
        
        .message {
            margin-bottom: 8px;
            word-wrap: break-word;
            animation: fadeIn 0.3s ease-in;
        }
        
        .username {
            font-weight: bold;
            color: var(--accent-color);
            margin-right: 8px;
        }
        
        .timestamp {
            font-size: 0.7em;
            color: rgba(255, 255, 255, 0.5);
        }
        
        #chat-form {
            display: flex;
            padding: 16px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            background-color: var(--secondary-color);
        }
        
        #message-input {
            flex: 1;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-color);
        }
        
        #send-button {
            margin-left: 8px;
            padding: 8px 16px;
            background-color: var(--accent-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        #username-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        }
        
        .modal-content {
            background-color: var(--secondary-color);
            padding: 24px;
            border-radius: 8px;
            width: 300px;
        }
        
        .modal-content h2 {
            margin-top: 0;
        }
        
        .modal-content input {
            width: 100%;
            padding: 8px;
            margin: 8px 0;
            border: none;
            background-color: rgba(255, 255, 255, 0.1);
            color: var(--text-color);
            border-radius: 4px;
        }
        
        .modal-content button {
            padding: 8px 16px;
            background-color: var(--accent-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
            margin-top: 16px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    <div id="chat-container">
        <div id="chat-header">
            <h3>Chat: <%= hiveAccount %></h3>
        </div>
        <div id="chat-messages">
            <!-- Messages will be added here dynamically -->
        </div>
        <form id="chat-form">
            <input type="text" id="message-input" placeholder="Send a message..." autocomplete="off">
            <button type="submit" id="send-button">Send</button>
        </form>
    </div>
    
    <div id="username-modal">
        <div class="modal-content">
            <h2>Enter your username</h2>
            <p>Choose a username to chat in <%= hiveAccount %>'s channel</p>
            <input type="text" id="username-input" placeholder="Username">
            <button id="start-chat-button">Start Chatting</button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Store DOM elements
        const chatForm = document.getElementById('chat-form');
        const messageInput = document.getElementById('message-input');
        const chatMessages = document.getElementById('chat-messages');
        const usernameModal = document.getElementById('username-modal');
        const usernameInput = document.getElementById('username-input');
        const startChatButton = document.getElementById('start-chat-button');
        
        // Chat parameters
        const hiveAccount = '<%= hiveAccount %>';
        let username = localStorage.getItem(`vimm-chat-username-${hiveAccount}`) || '';
        let chatConfig = null;

        // Connect to Socket.io
        const socket = io();
        const chatRoom = `chat-${hiveAccount}`;
        
        // Check if username is already set
        if (username) {
            usernameModal.style.display = 'none';
            socket.emit('join-room', chatRoom);
            loadChatHistory();
            loadChatConfig();
        }
        
        // Handle username submit
        startChatButton.addEventListener('click', () => {
            username = usernameInput.value.trim();
            if (username) {
                localStorage.setItem(`vimm-chat-username-${hiveAccount}`, username);
                usernameModal.style.display = 'none';
                socket.emit('join-room', chatRoom);
                loadChatHistory();
                loadChatConfig();
            }
        });
        
        // Handle chat message submission
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Emit message to server
            socket.emit('chat-message', {
                room: chatRoom,
                username,
                message,
                hiveAccount
            });
            
            // Save message to database via API
            fetch(`/api/chat/messages/${hiveAccount}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    username,
                    message
                })
            }).catch(error => console.error('Error saving message:', error));
            
            // Clear input
            messageInput.value = '';
            messageInput.focus();
        });
        
        // Load chat history from API
        async function loadChatHistory() {
            try {
                const response = await fetch(`/api/chat/messages/${hiveAccount}`);
                const messages = await response.json();
                
                // Clear existing messages
                chatMessages.innerHTML = '';
                
                // Add messages to chat
                messages.forEach(msg => {
                    addMessageToChat(msg.username, msg.message, new Date(msg.timestamp));
                });
                
                // Scroll to bottom
                scrollToBottom();
            } catch (error) {
                console.error('Error loading chat history:', error);
            }
        }
        
        // Load chat configuration
        async function loadChatConfig() {
            try {
                const response = await fetch(`/api/chat/config/${hiveAccount}`);
                chatConfig = await response.json();
                
                // Apply chat configuration (slow mode, etc.)
                if (chatConfig.slowMode) {
                    // Implement slow mode functionality
                    const interval = chatConfig.slowModeInterval || 3;
                    messageInput.disabled = false;
                    
                    chatForm.addEventListener('submit', () => {
                        messageInput.disabled = true;
                        setTimeout(() => {
                            messageInput.disabled = false;
                        }, interval * 1000);
                    });
                }
            } catch (error) {
                console.error('Error loading chat config:', error);
            }
        }
        
        // Listen for chat messages from the server
        socket.on('chat-message', (data) => {
            addMessageToChat(data.username, data.message, new Date(data.timestamp));
            scrollToBottom();
        });
        
        // Add a message to the chat display
        function addMessageToChat(username, message, timestamp) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            
            const formattedTime = timestamp.toLocaleTimeString([], { hour: '2-digit', minute: